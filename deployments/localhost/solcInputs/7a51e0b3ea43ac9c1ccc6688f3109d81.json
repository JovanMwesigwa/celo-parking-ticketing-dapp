{
  "language": "Solidity",
  "sources": {
    "contracts/Ledger.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.9;\r\n\r\n// Uncomment this line to use console.log\r\n// import \"hardhat/console.sol\";\r\n/*\r\n    1. We need an admin address to issue a new ticket\r\n    2. Ticket object should have - {\r\n        price,\r\n        date created,\r\n        car number plate,\r\n        is paid -- (bool)\r\n    }\r\n    3. Anyone can pay for the ticket on the owner's behalf\r\n\r\n    NB: The car's license plate is very important because we may need to query \r\n        its details or loop through and filter between paid and unpaid tickets (using the license plates)\r\n */\r\n\r\ncontract Ledger {\r\n    // Set the admin default address\r\n    address private i_admin;\r\n\r\n    // Create the ticket issuing object\r\n    struct Ticket {\r\n        string location;\r\n        string carNumberPlate;\r\n        uint256 price;\r\n        uint256 issuedAt;\r\n        bool isPaid;\r\n    }\r\n\r\n    // All Tickets array\r\n    Ticket[] private tickets;\r\n\r\n    // Constructor\r\n    constructor() {\r\n        i_admin = msg.sender;\r\n    }\r\n\r\n    // View functions\r\n    function getAdminAddress() public view returns (address) {\r\n        return i_admin;\r\n    }\r\n\r\n    // get all tickets obj\r\n    function getAllTickets() public view returns (Ticket[] memory) {\r\n        return tickets;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}